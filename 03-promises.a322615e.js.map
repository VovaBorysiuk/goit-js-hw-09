{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAGA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAIOQ,SAASC,cAAc,SAE/BC,iBAAiB,UAAUC,MAAMC,IAC3CA,EAAEC,iBAEF,MAAMb,GAASY,EAAEE,OAAOC,SAASf,MAAMgB,MACjCC,GAAQL,EAAEE,OAAOC,SAASE,KAAKD,MAC/BE,GAAUN,EAAEE,OAAOC,SAASG,OAAOF,MAGzC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,IAAK,CAChC,MAAMC,EAAepB,GAASmB,EAAI,GAAKF,EACvC,UACQnB,EAAcqB,EAAGC,GACvBxB,EAAAyB,OAAOC,QAAQ,uBAAqBH,QAAUC,M,CAC9C,MAAOG,GACP3B,EAAAyB,OAAOG,QAAQ,sBAAoBL,QAAQC,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst promiseForm = document.querySelector('.form')\n\npromiseForm.addEventListener('submit', async e => {\n  e.preventDefault();\n\n  const delay = +e.target.elements.delay.value;\n  const step = +e.target.elements.step.value;\n  const amount = +e.target.elements.amount.value;\n\n\n  for (let i = 1; i <= amount; i++) {\n    const currentDelay = delay + (i - 1) * step;\n    try {\n      await createPromise(i, currentDelay);\n      Notify.success(`✅ Fulfilled promise ${i} in ${currentDelay}ms`);\n    } catch (error) {\n      Notify.failure(`❌ Rejected promise ${i} in ${currentDelay}ms`);\n    }\n  }\n\n});"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","async","e","preventDefault","target","elements","value","step","amount","i","currentDelay","Notify","success","error","failure"],"version":3,"file":"03-promises.a322615e.js.map"}